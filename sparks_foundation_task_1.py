# -*- coding: utf-8 -*-
"""Sparks Foundation Task-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Sourav61/Sparks-Foundation/blob/main/Sparks_Foundation_Task_1.ipynb
"""

# from google.colab import drive
# drive.mount('/content/drive')

"""<h1>Author: Sourav Pahwa</h1>
<h2>GRIPMAY2021 - The Sparks Foundation - Data Science & Business Analytics Internship</h2>
<h3><b>Task-1 : Prediction using Supervised Machine Learning</b></h3>
<ul style="list-style-type:square"><h4><li>The Problem statement rquires us to predict the percentage score of a student based on the no. of study hours and we have to predict the score if a student studies for 9.25 hrs/ day</li></h4></ul>
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing All essential Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb

# %matplotlib inline

# Importing the data

Data = pd.read_csv("http://bit.ly/w-data")
print("Data imported successfully")
# Here we are checking the shape of the data(i.e. number of  the rows and columns in that dataset)

print(Data.shape)
# Here we are looking at the first 5 rows of the dataset given

print(Data.head())
# Data.tail()

# Here we are checking for any null values in our dataset

Data.isnull().sum()

Data.plot(x='Hours', y='Scores', style='*', color='Purple')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

# Here we divide data into atrributes and labels

x = Data.iloc[:, :-1].values  
y = Data.iloc[:, 1].values 
print(x)   
print(y)

# Now we are splitting our data into test data and training data.

from sklearn.model_selection import train_test_split  
x_train, x_test, y_train, y_test = train_test_split(x, y, 
                            test_size=0.3, random_state=0)

# Let's train our algorithm

from sklearn.linear_model import LinearRegression  
plot = LinearRegression()  
plot.fit(x_train, y_train) 

print("Model Trained successfully!!")

# Plotting the regression line
# y=mx+c
line = plot.coef_*x + plot.intercept_

# Plotting test data 
plt.scatter(x, y, marker='*', color='Purple')
plt.plot(x, line);
plt.show()

# Testing data - In Hours
print(x_test) 
# Predicting the scores
y_pred = plot.predict(x_test)

# Comparing Actual vs Predicted

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

# You can also test with your own data

hours = [[9.25]]
actual_pred = plot.predict(hours)
print(f"No of Hours = {hours}")
print(f"Predicted Score = {actual_pred[0]}")

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))